Shader.source[document.currentScript.src.split('js/shaders/')[1]] = `#version 300 es 
  precision highp float;

  out vec4 fragmentColor;
  in vec2 texCoord; // passed from VS
  in vec3 worldNormal;
  in vec4 worldPosition;  
  in vec3 modelPosition;
  // we need to bind texture to this
  uniform sampler2D colorTexture;

  uniform struct  {
    vec3 position;
  } camera;

  uniform struct  {
    vec4 position[8];
    vec4 powerDensity[8];
  } lighting;

  uniform struct {
    vec3 colorA[8];
    vec3 colorB[8];
    float freq[8];
    float noiseFreq[8];
    float noiseExp[8];
    float noiseAmp[8];
  } wood;

  uniform struct  {
    float shininess[8];
    vec4 color[8];
  } material;

  float snoise(vec3 r) {
    vec3 s = vec3(7502, 22777, 4767);
    float f = 0.0;
    for(int i=0; i<16; i++) {
      f += sin( dot(s - vec3(32768, 32768, 32768), r) / 65536.0);
      s = mod(s, 32768.0) * 2.0 + floor(s / 32768.0);
    }
    return f / 32.0 + 0.5;
  }

  void main(void) {
  	vec3 normal = normalize(worldNormal);
    vec3 lightDir = normalize(lighting.position[0].xyz - worldPosition.xyz * lighting.position[0].w);
    vec3 viewDir = normalize(camera.position - worldPosition.xyz);
    vec3 halfway = normalize(lightDir + viewDir);
    vec3 powerDensity = lighting.powerDensity[0].rgb / pow(length(lightDir), 2.0);
    float w = fract(modelPosition.x * wood.freq[0] + pow(snoise(modelPosition * wood.noiseFreq[0]), wood.noiseExp[0]) * wood.noiseAmp[0]);
    vec3 color = mix(wood.colorA[0], wood.colorB[0], w);
    fragmentColor.xyz = powerDensity * color * dot(normal, lightDir);
    fragmentColor.xyz += lighting.powerDensity[1].rgb * color * dot(normal, lighting.position[1].xyz);
    fragmentColor.xyz += lighting.powerDensity[1].rgb * material.color[1].rgb * pow(dot(normal, halfway), material.shininess[1]);
  }
`;